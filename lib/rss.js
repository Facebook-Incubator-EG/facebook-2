const Promise = require('bluebird');
const _ = require('lodash');
const moment = require('moment');
const debug = require('debug')('lib:rss');
const nconf= require('nconf');
const RSS = require('rss');
const path = require('path');
const fs = Promise.promisifyAll(require('fs'));

const utils = require('../lib/utils');
const echoes = require('../lib/echoes');
const mongo = require('../lib/mongo');

const CDOPEN = '<![CDATA[';
const CDCLOSE = ']]>';

const fbtrexRSSdescription = "This newsfeed is generated by the distributed observation of Facebook posts, collected with https://facebook.tracking.exposed browser extension; The posts are processed with a technical proceduce called semantic analysis, it extract the core meanings of the post linkable to existing wikipedia pages";
const fbtrexRSSproblem = "We can't provide a newsfeed on the information you requested. This is, normally, due because you look for a keyword which has not been seen recently. We permit to generate RSS only about voices which are part of wikipedia because this ensure we do not enable any kind of stalking. (editing wikipedia would not work). You can really use only label which are meaningful encyclopedic voices";

function buildXML(lang, label, enriched) {

    if(!_.size(enriched))
        return {
            lang,
            label,
            content: produceError(`Not found "${label}" in the last 7 days`)
        };

    const language = _.first(_.first(enriched).labels).lang;
    const title = `fbTREX ‚è© ${lang}/${label}`;
    const composed = new RSS({
        title,
        description: fbtrexRSSdescription,
        generator: `fbtrexRSS, algorithm version 0`,
        feed_url: 'https://facebook.tracking.exposed/fbtrexRSS',
        ttl: 60
    });

    /* > _.keys(_.first(enriched)) 
       > [ '_id', 'summary', 'labels' ]              */

    _.each(enriched, function(e) {
        try {
            composed.item(appendItem(e))
        } catch(error) {
            debug("--- Impossible to add an item: %s", error.message);
        }
    });
    debug("Generated RSS (%d bytes, from %d posts) for [%s] %s",
        _.size(composed.xml()), _.size(enriched), lang, label);

    return {
        lang,
        label,
        content: composed.xml()
    };
}

function appendItem(e) {
    /* every entry is an enriched post,
     * this function creates an RSS post (a.k.a item for RSS format) */
    const summary = _.first(e.summary);
    const labels = _.first(e.labels);

    const printableTime = summary.publicationTime ? summary.publicationTime : moment();
    const vdiff = summary.publicationTime ? 
        moment.duration(
            moment(summary.impressionTime) -
            moment(summary.publicationTime) 
        ).humanize() : null;

    const images = (summary.images && summary.images.count) ? `${summary.images.count} img` : null;
    const opti = _.reduce({
        'LIKE'  :   'üëç',
        'LOVE'  :   '‚ù§',
        'ANGRY' :   'üí¢',
        'WOW'   :   'üí°',
        'SAD'   :   'üò¢',
        'HAHA'  :   'üòÑ' }, function(memo, emoji, rname) {
            var amount = _.get(summary, rname);
            if(_.isUndefined(amount))
                return memo;
            memo.push(`${emoji} ${amount}`);
            return memo;
    }, [ images, vdiff ]);

    const infot = _.compact(opti).join('‚ïë');
    const title = `[${summary.source} üñâ ${summary.textsize}] ${infot}`;
    const tldr = _.reduce(summary.texts, function(memo, o) {
        memo += `‚Üí ${o}\n`;
        return memo;
    }, "");
    const formattedText = `${CDOPEN}\n${tldr}\n${CDCLOSE}\n`;
    const concepts = `${CDOPEN}\n\n‚áâ concepts found:\n‚áâ ${_.uniq(labels.l).join(', ')}\n${CDCLOSE}`;
    const postIdLink = summary.postId ? `https://facebook.com/${summary.postId}` : "https://facebook.tracking.exposed/fbtrexRSS#problem";
    const permaLink =  summary.permaLink ? summary.permaLink : postIdLink;

    /* this is the item format expected by RSS */
    return {
        title,
        description: `${tldr}${concepts}`,
        url: permaLink,
        guid: summary.semanticId,
        date: printableTime,
     };
}

function produceError(note) {
    let feed = new RSS({
        title: `fbTREX ‚ìç  Error: ${note}`,
        description: `There is an error in your requested feed: ${note}`,
        feed_url: 'https://facebook.tracking.exposed/fbtrexRSS',
        ttl: 20
    });
    feed.item({
        title: `fbTREX ‚ìç  Error: ${note}`,
        description : fbtrexRSSproblem,
        guid: 1234567890,
        date: moment().toISOString()
    });
    return feed.xml();
};

function composeRSSfeed(lang, title, amount) {
    const builderFunction = _.partial(buildXML, lang, title);
    return mongo
        .aggregate(nconf.get('schema').semantics, [
            { $sort: { when: -1 }},
            { $match: { lang: lang, label: title }},
            { $group: { _id: "$semanticId" }},
            { $limit: amount },
            { $lookup: { from: 'summary', localField: '_id', foreignField: 'semanticId', as: 'summary' }},
            { $lookup: { from: 'labels', localField: '_id', foreignField: 'semanticId', as: 'labels' }}
        ])
        .then(builderFunction)
        .tap(function(entry) {
            // reminder, this works because there is an expiration date on the object 
            return mongo
                .writeOne(nconf.get('schema').feeds, {
                    lang: entry.lang,
                    label: entry.label,
                    createdAt: new Date(),
                    content: entry.content,
                })
        })
        .then(function(entry) {
            debug("Saved in cache the RSS request");
            return { text: entry.content };
        });
};


module.exports = {
    composeRSSfeed,
    produceError,
};
